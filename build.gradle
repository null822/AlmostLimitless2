plugins {
    id 'fabric-loom' version '1.2-SNAPSHOT'
    id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

repositories {
    // Add repositories to retrieve artifacts from in here.
    // You should only use this when depending on other mods because
    // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
    // See https://docs.gradle.org/current/userguide/declaring_repositories.html
    // for more information about repositories.
    exclusiveContent {
        forRepository {
            maven {
                name = "Modrinth"
                url = "https://api.modrinth.com/maven"
            }
        }
        filter {
            includeGroup "maven.modrinth"
        }
    }
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

        // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    modLocalRuntime "maven.modrinth:qPqMrMUl:99RJdkEG"
    modLocalRuntime "maven.modrinth:gnI4RYZy:6VbZYpdo"
}

processResources {
    inputs.property "version", project.version
    inputs.property "minecraft_version", project.minecraft_version
    inputs.property "loader_version", project.loader_version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version,
                "minecraft_version": project.minecraft_version,
                "loader_version": project.loader_version
    }
}

def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release = targetJavaVersion
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    archivesBaseName = project.archives_base_name
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}"}
    }
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}


import org.objectweb.asm.ClassReader
import org.objectweb.asm.Opcodes
import org.objectweb.asm.Type
import org.objectweb.asm.tree.ClassNode

import java.nio.file.FileSystem
import java.nio.file.FileSystems
import java.nio.file.Files
import java.nio.file.Path
import java.util.stream.Collectors

task bloatedMixin {
    doLast {
        List<String> lines = new ArrayList<>();
        lines.add("package com.null8.messingaround.mixin;")
        lines.add("")
        lines.add("import org.spongepowered.asm.mixin.Mixin;")
        lines.add("")
        lines.add("@Mixin(targets = {")

        Path commonJar = loom.namedMinecraftProvider.parentMinecraftProvider.remappedJars[0].outputJarPath()

        FileSystems.newFileSystem(URI.create("jar:${commonJar.toUri()}"), [create: false]).withCloseable { fs ->
            addMixinLines(lines, fs)
        }
        lines.set(lines.size()-1, lines.get(lines.size()-1).substring(0, lines.get(lines.size()-1).size()-1))
        lines.add("})")
        lines.add("public class THE {")
        lines.add("")
        lines.add("}")


        file('src/main/java/com/null8/messingaround/mixin/THE.java').text = String.join('\n', lines) + '\n'
    }
}

def addMixinLines(List<String> lines, FileSystem fs) {
    for (final def a in fs.rootDirectories) {
        Files.walk(a).filter { Files.isRegularFile(it) && it.toString().endsWith(".class") }
                .map { loadClass(it) }
                .sorted(Comparator.comparing { it.name })
                .filter { (it.access & Opcodes.ACC_INTERFACE) == 0 }
                .forEach { node ->
                    lines.add("        \"${node.name}\",")
//                    for (def method : node.methods) {
//                        // Checklist for finding block constructors as of 1.19.3:
//                        //  - class directly in net.minecraft.block (excluding subpackages)
//                        //  - method name == <init> (by definition)
//                        //  - contains an AbstractBlock$Settings parameter
//                        //  - only taking into account non-abstract classes and non-public constructors
//
//                        // Block constructor...
//                        if (method.name == "<init>" && Type.getArgumentTypes(method.desc).any { it.internalName == 'net/minecraft/block/AbstractBlock$Settings' }) {
//                            // ...and non-public
//                            if ((method.access & Opcodes.ACC_PUBLIC) == 0) {
//                                lines.add("transitive-accessible method $node.name <init> $method.desc")
//                            }
//                        }
//                    }
                }
    }
}

ClassNode loadClass(Path path) {
    def node = new ClassNode()

    Files.newInputStream(path).withCloseable { is ->
        new ClassReader(is).accept(node, ClassReader.SKIP_CODE | ClassReader.SKIP_DEBUG | ClassReader.SKIP_FRAMES)
    }

    return node
}